# Default values for the poiesis Helm chart.
# This file defines the configurable parameters for deploying the Poiesis application
# and its dependencies using Helm. Values here can be overridden during Helm installation or upgrade.

# -- Global Chart Settings --

# Override the chart name. If set, this will override the name based on the chart's directory.
nameOverride: ""
# Override the full name of the release. If set, this completely overrides the generated release name.
fullnameOverride: ""

# Common annotations to add to all resources created by this chart.
# Useful for adding metadata like ownership, contact info, or integration points.
commonAnnotations: {}
  # Example:
  # my-annotation: "my-value"

# -- Poiesis Application Configuration --
# This section configures the main Poiesis application deployment.
poiesis:
  # Controls whether the Poiesis application itself is deployed.
  # Note: Useful during development, disable poiesis but enable all its components
  #   expose them and run hot loaded poiesis.
  enabled: true
  # Specifies the number of Poiesis application pods to run.
  replicaCount: 1

  # Configuration for the Poiesis application container image.
  image:
    # The Docker image repository for the Poiesis application.
    repository: jaeaeich/poiesis
    # The Kubernetes image pull policy (e.g., Always, Never, IfNotPresent).
    pullPolicy: IfNotPresent
    # The tag of the Docker image to use (e.g., "latest", "v0.1.0"). "latest" is generally not recommended for production.
    tag: "latest"

  # Configuration for the Kubernetes Service exposing the Poiesis application.
  service:
    # The type of Kubernetes Service (e.g., ClusterIP, NodePort, LoadBalancer).
    type: ClusterIP
    # The port on which the Service will expose the Poiesis application within the cluster.
    port: "8000" # Corresponds to the target port on the Poiesis container.

  # Poiesis application-specific runtime configuration.
  # These values are typically passed as environment variables or configuration files to the application.
  config:
    # Logging level for the Poiesis application (e.g., "INFO", "DEBUG", "WARN", "ERROR").
    logLevel: "INFO"
    # Maximum number of connections in the MongoDB connection pool.
    mongodbMaxPoolSize: "100"
    # The name of the MongoDB database used by Poiesis.
    mongodbDatabase: "poiesis"
    # Specifies the deployment environment (e.g., "dev", "staging", "prod"). Affects application behavior.
    poiesisEnv: "prod"
    # Job configs for core components
    # Restart and pull policy for core components
    restartPolicy: "Never"
    imagePullPolicy: "IfNotPresent"
    # Defines after how long should a completed or failed job be removed.
    # This is critical for PVC cleanup - completed job pods hold references to PVCs
    # preventing them from being deleted. Setting this ensures jobs and their pods
    # are automatically cleaned up, allowing PVCs to terminate properly.
    # Value in seconds (3600 = 1 hour). Lower values = faster cleanup but less debugging time.
    jobTtl: "3600"
    # Maximum duration (in seconds) allowed for monitoring operations by TExAM.
    # Also acts as the timeout for executor pods â€” if any executor
    # remains active beyond this period (including execution time), it will
    # be terminated and the associated task marked as failed.
    # Set to "0" for no timeout (infinite duration).
    # For example, "10" means 10 seconds.
    monitorTimeoutSeconds: "0"

  # Storage configuration for PVCs used by Poiesis tasks
  # NOTE: PVCs are automatically created for each task and cleaned up when the task completes.
  # If PVCs get stuck in "Terminating" state, check if job pods are still running - they
  # hold references to PVCs preventing deletion. The jobTtl setting above helps with this.
  storage:
    # Access mode for task PVCs (ReadWriteOnce, ReadWriteMany, ReadWriteOncePod)
    # ReadWriteOnce: Volume can be mounted as read-write by a single node (most common)
    # ReadWriteMany: Volume can be mounted as read-write by many nodes (requires supporting storage class)
    accessMode: "ReadWriteOnce"
    # Storage class name for task PVCs - must exist in your cluster
    # Common values: "standard", "gp3", "local-path", "nfs", "premium-rwo"
    className: "standard"

  # Security Context Configuration
  # This section allows you to configure or disable security contexts
  securityContext:
    # Path where the security context will be mounted,
    # services will read this path to get the security context.
    path: "/etc/poiesis/security"

    # Infrastructure components (API pod/container + all jobs: TIF, TOF, TExAM, etc.)
    # These should be hardened as they are part of the Poiesis infrastructure
    infrastructure:
      # Set to false to disable security contexts for all infrastructure components
      enabled: true

      # Pod security context for infrastructure components
      # Additional fields can be added directly to this section as needed.
      # Example: To add sysctls, include them in the pod section below.
      pod:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: "RuntimeDefault"

      # Container security context for infrastructure components
      container:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: false # Setting to true breaks the API - requires writable filesystem
        capabilities:
          drop:
            - "ALL"

    # Task executor pods (launched by TExAM to run user workloads)
    # These are also hardened for security but can be disabled if needed.
    # NOTE: Since TES expects the executor to be the user's sandbox,
    # it's possible that users might need to run some privileged operations.
    # If you are sure that you don't need any privileged operations,
    # you can disable this by setting `enabled: false` or make the
    # security context more permissive by modifying the settings below.
    # cf. https://github.com/ga4gh/task-execution-schemas/issues/237
    executors:
      # Set to false to disable security contexts for task executor pods
      enabled: true

      # Additional fields can be added directly to this section as needed.
      # Example: To add sysctls, include them in the pod section below.
      pod:
        runAsNonRoot: false
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: "RuntimeDefault"

      container:
        runAsNonRoot: false
        allowPrivilegeEscalation: true
        readOnlyRootFilesystem: false
        runAsUser: 1001
        runAsGroup: 1001
        privileged: false
        capabilities:
          drop:
            - "SYS_ADMIN" # Block mount, pivot_root, remount, etc.
            - "SYS_MODULE" # Block kernel module loading
            - "SYS_PTRACE" # Block ptrace of other processes
            - "SYS_TIME" # Block system time modification
            - "NET_ADMIN" # Block network config (e.g., iptables, interfaces)
            - "NET_RAW" # Block raw sockets (ping, nmap, etc.)
            - "NET_BIND_SERVICE" # Block binding to ports <1024
            - "NET_BROADCAST" # Block sending network broadcasts

  # Configuration for the authentication mechanism used by Poiesis.
  auth:
    # Specifies the authentication provider.
    # Options:
    #   "dummy":   Uses a simple, potentially insecure, internal authentication (for development/testing).
    #   "oidc":  Uses OpenID Connect for authentication (recommended for production).
    type: dummy
    # Note: If you have selected `dummy` for auth, then no need to change below settings
    # they will be ignored anyways.
    # Add you OAuth2/ODIC server url
    # Example: If using keycloak with realm as poiesis
    #   https://myorg.keycloak.com/realms/poiesis
    oidc:
      issuer: "https://myoidcprovider.com"
      # Client ID registered for the Poiesis application.
      clientId: "poiesis"
      # Client secret for the Poiesis application.
      clientSecret: "my-secret"

  # -- External Dependency Configuration --
  externalDependencies:
    # Configuration for connecting to an external MongoDB instance.
    mongodb:
      # MongoDB connection string needs to be provided in the format:
      # mongodb://<username>:<password>@<host>:<port>
      connectionString: ""
    # Configuration for connecting to an external Redis instance.
    redis:
      # Hostname or IP address of the external Redis server.
      host: ""
      # Port number of the external Redis server.
      port: ""
      # Auth configs
      auth:
        enabled: true
        # Password for authenticating with the external Redis server. Use secrets management for production.
        Password: "" # <-- IMPORTANT: Secure this value.
    # Configuration for connecting to an external Minio (S3-compatible) object storage instance.
    minio:
      # If true, Poiesis will use the connection details specified below instead of deploying the minio sub-chart.
      enabled: false
      # URL of the external Minio server (e.g., "http://minio.example.com:9000").
      url: ""
      # Auth configs
      auth:
        # Access key (username) for the external Minio instance.
        rootUser: ""
        # Secret key (password) for the external Minio instance. Use secrets management for production.
        rootPassword: "" # <-- IMPORTANT: Secure this value.
